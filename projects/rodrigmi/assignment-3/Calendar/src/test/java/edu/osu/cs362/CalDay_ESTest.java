/*
 * This file was automatically generated by EvoSuite
 * Mon May 15 19:29:57 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.osu.cs362.Appt;
import edu.osu.cs362.CalDay;
import java.time.ZonedDateTime;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
//import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CalDay_ESTest extends CalDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt(1924, 1924, 23, 1, 0, "\t --- ", "\t --- ");
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      appt0.setStartHour(0);
      appt0.setStartMinute(59);
      linkedList0.add(appt0);
      Appt appt1 = new Appt(23, (-1557), 1, (-1305), 1, "|", "");
      linkedList0.add(appt1);
      calDay0.addAppt(appt0);
      assertEquals(3, calDay0.getSizeAppts());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt(1924, 1924, 23, 1, 0, "\t --- ", "\t --- ");
      appt0.setStartHour(1);
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      Appt appt1 = new Appt((-1), 5, 1184, 1184, (-1162), "", "");
      linkedList0.add(appt1);
      appt0.setStartMinute(59);
      calDay0.addAppt(appt0);
      assertEquals(0, calDay0.getDay());
  }

  /*@Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)MockGregorianCalendar.from(zonedDateTime0);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      Iterator<?> iterator0 = calDay0.iterator();
      assertEquals(14, calDay0.getDay());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      assertNotNull(iterator0);
  } */

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      boolean boolean0 = calDay0.isValid();
      assertFalse(boolean0);
  }
  /*
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)MockGregorianCalendar.from(zonedDateTime0);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      int int0 = calDay0.getYear();
      assertEquals(1, calDay0.getMonth());
      assertEquals(2014, int0);
      assertTrue(calDay0.isValid());
      assertEquals(14, calDay0.getDay());
  } */

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.year = (-1);
      int int0 = calDay0.getYear();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(62, 62, 62, 62, 62);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.getSizeAppts();
      assertTrue(calDay0.isValid());
      assertEquals(4, calDay0.getMonth());
      assertEquals(67, calDay0.getYear());
      assertEquals(3, calDay0.getDay());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt(1924, 1924, 23, 1, 0, "\t --- ", "\t --- ");
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      linkedList0.add(appt0);
      int int0 = calDay0.getSizeAppts();
      assertEquals(1, int0);
  }

  /*
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)MockGregorianCalendar.from(zonedDateTime0);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      int int0 = calDay0.getMonth();
      assertEquals(2014, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(1, int0);
      assertEquals(14, calDay0.getDay());
  } */

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.month = (-1);
      int int0 = calDay0.getMonth();
      assertEquals((-1), int0);
  }
  
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      int int0 = calDay0.getDay();
      assertEquals(14, int0);
      assertEquals(2014, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getMonth());
  }


  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.day = 1;
      calDay0.day = (-1555);
      int int0 = calDay0.getDay();
      assertEquals((-1555), int0);
  }


  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt(1924, 1924, 23, 1, 0, "\t --- ", "\t --- ");
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      linkedList0.add(appt0);
      LinkedList<Appt> linkedList1 = calDay0.getAppts();
      assertSame(linkedList1, linkedList0);
  }


  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CalDay calDay0 = null;
      try {
        calDay0 = new CalDay((GregorianCalendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.osu.cs362.CalDay", e);
      }
  }


  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(62, 62, 62, 62, 62);
      mockGregorianCalendar0.setLenient(false);
      CalDay calDay0 = null;
      try {
        calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         assertThrownBy("java.util.GregorianCalendar", e);
      }
  }
  /*
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)MockGregorianCalendar.from(zonedDateTime0);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      Appt appt0 = new Appt(1, 59, 59, 1, 1, (String) null, (String) null);
      linkedList0.add(appt0);
      String string0 = calDay0.toString();
      assertEquals("\t --- 1/14/2014 --- \n --- -------- Appointments ------------ --- \nnull \n", string0);
  } */


  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.valid = true;
      // Undeclared exception!
      try { 
        calDay0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.valid = true;
      // Undeclared exception!
      try { 
        calDay0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Iterator<?> iterator0 = calDay0.iterator();
      assertNull(iterator0);
  }


  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt((-1), (-1), (-891), (-891), (-1), "\n", "UhuQTLy!'f9ouV^A|;W");
      calDay0.addAppt(appt0);
      assertEquals(-891, appt0.getStartDay());
  }


  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      // Undeclared exception!
      try { 
        calDay0.getSizeAppts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.osu.cs362.CalDay", e);
      }
  }


  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      int int0 = calDay0.getDay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      int int0 = calDay0.getYear();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      boolean boolean0 = calDay0.isValid();
      assertTrue(boolean0);
      assertEquals(1, calDay0.getMonth());
      assertEquals(2014, calDay0.getYear());
      assertEquals(14, calDay0.getDay());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt(1924, 1924, 23, 1, 0, "\t --- ", "\t --- ");
      appt0.setStartHour(0);
      appt0.setStartMinute(59);
      // Undeclared exception!
      try { 
        calDay0.addAppt(appt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      int int0 = calDay0.getMonth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      String string0 = calDay0.toString();
      assertEquals("", string0);
  }
}